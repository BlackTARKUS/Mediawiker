# [PackageDev] target_format: plist, ext: tmLanguage
comment: "
  TODO: language
  1. Add a bunch of HTML tags.  See the #block and #style sections.
  3. Correctly scope all the parser functions and their contents.
      This on will be complicated, as there are several: expr, if, etc.
  5. Get some kind of folding by heading (Not possible with TM1 rules).
  7. Make sure that illegal things are correctly scoped illegal.
    This is non-trivial, and has several parts
    - Bold/italic are based on brain-dead heuristics.  Also, we should scope as illegal when for instance a new heading starts before an italic has been closed.
    - Templates... these will be pretty tough as they are flexible.
  9. <timeline></timeline> tag. Not sure this one is worth the effort
  10. Figure out a better scope for meta.function-call.  Infininight suggests entity.name.function.call, to be paralleled by entity.name.function.definition.
    I am not completly sure I like that solution, but it is probably better than meta.function-call

  TODO: snippents and commands
  2. Add a drop command (and keyboard shortcuts) for links/images
  3. Make sure all the preference items are sorted out, for instance smart typing pairs, indent patterns, etc.
  4. Command: big/small

  FINISHED:
  2. Add support for LaTeX math mode inside of <math></math> tags.
  1. Add a command for new list item.  This one is trivial
  6. Get the symbol list working on headings. Trivial.
  8. <gallery></gallery> tag.  This one adds some complication, but is worth supporting.
  4. commands for bold/italic (tbates)
  4. All lists scoped by type of list. (tbates)"
name: Mediawiki NG
scopeName: text.html.mediawiki
fileTypes: [mediawiki, wikipedia, wiki]
uuid: 6AF21ADF-316A-47D1-A8B6-1BB38637DE9A

patterns:
- include: '#block'
- include: '#block_pre_spaced'
- include: '#inline'

repository:
  magic_words:
    patterns:
    - name: keyword.control.mediawiki
      comment: add other types of magic words..
      match: "(__NOTOC__|__FORCETOC__|__TOC__|__NOEDITSECTION__|__NEWSECTIONLINK__|__NONEWSECTIONLINK__|__NOGALLERY__|__HIDDENCAT__|__NOCONTENTCONVERT__|__NOCC__|__NOTITLECONVERT__|__NOTC__|__START__|__END__|__INDEX__|__NOINDEX__|__STATICREDIRECT__|__DISAMBIG__|)"

  block:
    patterns:
    - name: meta.redirect.mediawiki
      begin: ^\s*(?i)(#redirect)
      beginCaptures:
        '1': {name: keyword.control.redirect.mediawiki}
      end: \n
      patterns:
      - include: '#link'
    #- name: meta.tag.validhtml.mediawiki
    #  contentName: entity.other.attributes.validhtml.mediawiki
    #  begin: ((</?)(code|div|pre))
    #  beginCaptures:
    #    '1': {name: punctuation.definition.tag.mediawiki}
    #    '2': {name: punctuation.definition.tag.mediawiki}
    #    '3': {name: entity.name.tag.validhtml.mediawiki}
    #  end: (>)
    #  endCaptures:
    #    '1': {name: punctuation.definition.tag.mediawiki}
    - comment: 'source: <source lang="R">'
      contentName: meta.tag.source.mediawiki
      begin: ' ?(<)(source|syntaxhighlight)[ \t]+(lang)(=)(")([^"]+)(")(>)'
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.source.mediawiki}
        '3': {name: entity.other.attribute-name.mediawiki}
        '4': {name: entity.other.attributes.validhtml.mediawiki}
        '5': {name: entity.other.attributes.validhtml.mediawiki}
        '6': {name: string.quoted.mediawiki}
        '7': {name: entity.other.attributes.validhtml.mediawiki}
        '8': {name: meta.tag.validhtml.mediawiki}
      end: ' ?(</)(source|syntaxhighlight)(>)'
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.source.mediawiki}
        '3': {name: meta.tag.validhtml.mediawiki}
      patterns:
      - include: '#source-stuff'
    - contentName: meta.tag.source.mediawiki
      begin: ' ?(<)(uml)(>)'
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.source.mediawiki}
        '3': {name: meta.tag.validhtml.mediawiki}
      end: ' ?(</)(uml)(>)'
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.source.mediawiki}
        '3': {name: meta.tag.validhtml.mediawiki}
    - comment: 'Match lines that begin & end with  1 \u201C=\u201D: Mismatch "=" marked invalid.'
      name: markup.heading.1.mediawiki
      begin: ^(={1})(?!=)(?=.*\1\s*$)
      beginCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      end: (\1)\s*$\n?
      endCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      patterns:
      - name: invalid.illegal.extra-equals-sign.mediawiki
        match: ={1}(=+\s*$)
      - include: '#inline'
    - comment: Match next heading
      name: markup.heading.2.mediawiki
      begin: ^(={2})(?!=)(?=.*\1\s*$)
      beginCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      end: (\1)\s*$\n?
      endCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      patterns:
      - name: invalid.illegal.extra-equals-sign.mediawiki
        match: ={2}(=+\s*$)
      - include: '#inline'
    - comment: Match next heading
      name: markup.heading.3.mediawiki
      begin: ^(={3})(?!=)(?=.*\1\s*$)
      beginCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      end: (\1)\s*$\n?
      endCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      patterns:
      - name: invalid.illegal.extra-equals-sign.mediawiki
        match: ={3}(=+\s*$)
      - include: '#inline'
    - comment: Match next heading
      name: markup.heading.4.mediawiki
      begin: ^(={4})(?!=)(?=.*\1\s*$)
      beginCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      end: (\1)\s*$\n?
      endCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      patterns:
      - name: invalid.illegal.extra-equals-sign.mediawiki
        match: ={4}(=+\s*$)
      - include: '#inline'
    - comment: Match next heading
      name: markup.heading.5.mediawiki
      begin: ^(={5})(?!=)(?=.*\1\s*$)
      beginCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      end: (\1)\s*$\n?
      endCaptures:
        '1': {name: markup.heading.tag.mediawiki}
      patterns:
      - name: invalid.illegal.extra-equals-sign.mediawiki
        match: ={5}(=+\s*$)
      - include: '#inline'
    - comment: "A separator is made up of 4 or more -s alone on a line by themselves."
      name: meta.separator.mediawiki
      match: ^-{4,}[ \t]*($\n)?
    - comment: "numbered-unnumbered-definition lists"
      name: markup.list.mediawiki
      begin: ^([#*;:]+)
      end: \n
      beginCaptures:
        '1': {name: markup.other.special.mediawiki}
      patterns:
      - name: markup.list.item-definition.mediawiki
        match: (?<=;)([^;:#*]*)(:).*$
        captures:
          '2': {name: markup.other.special.mediawiki}
      - include: '#inline'
    #- begin: ^([#:;])
    #  comment: "need to scope nested lists - need to scope with definition lists (; :) indented paragraphs, as used on talk pages (:)"
    #  end: ^(?!\1)
    #  name: markup.list.numbered.mediawiki
    #  patterns:
    #  - {include: '#inline'}
    #- begin: ^([*])
    #  comment: unordered list
    #  end: ^(?!\1)
    #  name: markup.list.unnumbered.mediawiki
    #  patterns:
    #  - {include: '#inline'}
    - include: '#table'
    - include: '#comments'
    #- comment: "Anything that is not a code block, list, header, etc. is a paragraph."
    #  removed: enough to markup as text and no conflict with other markups (ex. in templates.. long multiline text in param value)
    #  name: meta.paragraph.mediawiki
    #  begin: ^(?![\t ;*#:=<]|----|$)
    #  end: ^(?:\s*$|(?=[;*#:=<]|----))
    #  patterns:
    #  - include: '#inline'

  block_pre_spaced:
    patterns:
    - comment: "Code blocks start with one space.  Wiki text and html are still interpreted in MediaWiki, unlike in mediawiki."
      name: markup.raw.block.mediawiki
      begin: ^ (?=\s*\S)
      end: ^(?=[^ ])
      patterns:
      - include: '#inline'
    - include: '#table'
    - include: '#comments'

  block_pre_spaced_in_templates:
    patterns:
    - comment: "Code blocks inside templates. Terminates by | params delimiter too."
      name: markup.raw.block.mediawiki
      begin: ^ (?=\s*\S)
      end: (?=^[^ ]|\|)
      patterns:
      - include: '#inline'
    - include: '#table'
    - include: '#comments'

  block_html:
    comment: "The available block HTML tags supported are:
              * blockquote, center, pre, div, hr, p
              * tables: table, th, tr, td, caption
              * lists: ul, ol, li
              * definition lists: dl, dt, dd
              * headers: h1, h2, h3, h4, h5, h6
              * br"
    patterns:
    - name: meta.embedded.tex.math
      contentName: source.tex.math
      begin: (<math>)
      end: ((<)/math>)
      captures:
        '0': {name: punctuation.section.embedded.tex.math}
        '1': {name: meta.tag.inline.math.mediawiki}
        '2': {name: source.tex.math}
      patterns:
      - include: text.tex.math
    - name: meta.embedded.html.table
      contentName: source.html
      begin: <table[^>]*>
      end: </table>
      patterns:
      - include: text.html
    - comment: '<ref>content</ref> TODO: Redundant with named tag'
      contentName: meta.reference.content.mediawiki
      begin: (<)(ref)(>)
      beginCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      end: (</)(ref)(>)
      endCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      patterns:
      - include: '#inline'
    - comment: '<blockquote>content</blockquote>'
      contentName: meta.reference.blockquote.content.mediawiki
      begin: (<)(blockquote)(>)
      beginCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      end: (</)(blockquote)(>)
      endCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      patterns:
      - include: '#inline'
    - comment: '<center>content</center>'
      contentName: meta.reference.center.content.mediawiki
      begin: (<)(center)(>)
      beginCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      end: (</)(center)(>)
      endCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      patterns:
      - include: '#inline'
    - comment: <ref name="label"/>
      name: meta.reference.named.cite.mediawiki
      match: (<)(ref) *((name) *(=) *([^>]*))(/>)
      captures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '4': {name: entity.name.tag.name.mediawiki}
        '5': {name: meta.tag.inline.ref.mediawiki}
        '6': {name: string.quoted.ref.name.mediawiki}
        '7': {name: meta.tag.inline.ref.mediawiki}
    - comment: <ref name="label">content</ref>
      contentName: meta.reference.content.labelled.mediawiki
      begin: (<)(ref) *((name) *(=) *([^>]*))(>)
      beginCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '4': {name: entity.name.tag.name.mediawiki}
        '5': {name: meta.tag.inline.ref.mediawiki}
        '6': {name: string.quoted.ref.name.mediawiki}
        '7': {name: meta.tag.inline.ref.mediawiki}
      end: (</)(ref)(>)
      endCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: meta.gallery.mediawiki
      begin: (<)(gallery[^>]*)(>)
      end: (</)(gallery)(>)
      beginCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      endCaptures:
        '1': {name: meta.tag.inline.ref.mediawiki}
        '2': {name: entity.name.tag.ref.mediawiki}
        '3': {name: meta.tag.inline.ref.mediawiki}
      patterns:
      - name: meta.item.gallery.mediawiki
        begin: |-
          (?x)
          ^(?!\s*\n)                      (?# not an empty line)
          ( [ ]*(([Ff]ile|[Ii]mage)(:))?   (?# spaces, image, colon, The "File:" prefix can be omitted.)
          ([^\[\]|]+)                     (?# anything: filename)
          ((\|)([^\n]*))?                 (?# pipe, anything: description)
          (?<!\s)[ ]*                     (?# spaces)
          )?
        beginCaptures:
          '3': {name: constant.other.namespace.image.mediawiki}
          '4': {name: punctuation.fix_this_later.colon.mediawiki}
          '5': {name: constant.other.wiki-link.image.mediawiki}
          '6': {name: punctuation.fix_this_later.pipe.mediawiki}
        end: \n
        patterns:
        - contentName: string.other.title.gallery.mediawiki
          begin: ^(?!\|)|(\|)
          beginCaptures:
            '1': {name: punctuation.fix_this_later.pipe.mediawiki}
          end: \n|(?=\|)
          patterns:
          - include: '#inline'
        - name: punctuation.fix_this_later.pipe.mediawiki
          match: \|

  comments:
    patterns:
    - name: comment.block.html.mediawiki
      begin: <!--
      end: --\s*>
      patterns:
      - name: invalid.illegal.bad-comments-or-CDATA.html.mediawiki
        match: --

  entities:
    comment: "Mediawiki supports Unicode, so these should not usually be necessary, but they do show up on pages from time to time"
    patterns:
    - name: constant.character.entity.html.mediawiki
      match: '&([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);'
    - name: invalid.illegal.bad-ampersand.html.mediawiki
      match: '&'

  inline:
    patterns:
    - match: (~~~~~)(~{0,2})(?!~)
      captures:
        '1': {name: constant.other.date-time.mediawiki}
        '2': {name: invalid.illegal.too-many-tildes.mediawiki}
    - comment: 3 ~s for sig, 4 for sig + timestamp
      name: constant.other.signature.mediawiki
      match: ~~~~?
    # order is important!
    - include: '#link'
    - include: '#style'
    - include: '#table'
    - include: '#template_parameters'
    - include: '#template'
    - include: '#block_html'
    - include: '#comments'
    - include: '#magic_words'

  link:
    patterns:
    - name: meta.image.wiki.mediawiki
      begin: |-
        (?x:(\[\[)                    (?# opening brackets)
        ( [ ]*(([Ff]ile|[Ii]mage)(:)) (?# spaces, image, colon)
        ([^\[\]|]+)                   (?# anything)
        (?<!\s)[ ]*                   (?# spaces)
        ))
      beginCaptures:
        '1': {name: meta.tag.inline.any.mediawiki}
        '4': {name: constant.other.namespace.image.mediawiki}
        '5': {name: punctuation.fix_this_later.colon.mediawiki}
        '6': {name: constant.other.wiki-link.image.mediawiki}
      end: |-
        (?x:
        ((\|)[ ]*( [^\[\]|]+ )[ ]*)?  (?# pipe, spaces, anything, spaces)
        (\]\])                        (?# closing brackets)
        )
      endCaptures:
        '2': {name: punctuation.fix_this_later.pipe.mediawiki}
        '3': {name: string.other.title.link.wiki-link.mediawiki}
        '4': {name: meta.tag.inline.any.mediawiki}
      patterns:
      - match: |-
          (?x)
          (\|)[ ]*
          ( (thumbnail|thumb|frameless|frame|border)
           |(right|left|center|none)
           |(baseline|sub|super|top|text-top|middle|bottom|text-bottom)
           |([0-9]+)?(x?)([0-9]+)?(px)
           |(link=)([^|]+)?
           |(alt=)([^|]+)?
           |(class=)([^|]+)?
           |([^|\]]+)
          )[ ]*
        captures:
          '1': {name: punctuation.fix_this_later.pipe.mediawiki}
          '2': {name: keyword.control.image.formatting.mediawiki}
          '3': {name: keyword.control.image.frame.mediawiki}
          '4': {name: keyword.control.image.alignment.mediawiki}
          '5': {name: keyword.control.image.alignment-vertical.mediawiki}
          '6': {name: constant.numeric.image.width.mediawiki}
          '7': {name: punctuation.other.unit.image.size.mediawiki}
          '8': {name: constant.numeric.image.height.mediawiki}
          '9': {name: keyword.control.image.size.mediawiki}
          '10': {name: keyword.control.image.link.mediawiki}
          '11': {name: constant.other.wiki-link.mediawiki}
          '12': {name: keyword.control.image.alt.mediawiki}
          '13': {name: constant.other.image.alt.mediawiki}
          '14': {name: keyword.control.image.css-class.mediawiki}
          '15': {name: constant.other.image.css-class.mediawiki}
          '16': {name: string.other.image.caption.mediawiki}
      - name: punctuation.fix_this_later.pipe.mediawiki
        match: \|
      - include: '#style_in_link'
      applyEndPatternLast: 1
    - name: meta.link.wiki.redirect.mediawiki
      begin: |-
        (?x:
        ({{)                        (?# opening brackets)
        ([Rr]edirect|subst:.*)      (?# redirect?)
        [ ]*                        (?# spaces)
        (\\
        |)                          (?# pipe)
        )
      beginCaptures:
        '1': {name: meta.tag.inline.redirect.mediawiki}
        '2': {name: keyword.operator.wiki-link.redirect.mediawiki}
        '3': {name: constant.other.pipe.mediawiki}
      end: |-
        (?x:
        (([\\|}]+)(\\|)([\\|}]+))?    (?#  from | to)
        ([^}]*)                       (?# anything)
        (}})                          (?# closing brackets)
        )
      endCaptures:
        '2': {name: meta.tag.inline.any.mediawiki}
        '3': {name: markup.underline.link.internal.mediawiki}
        '4': {name: constant.other.pipe.mediawiki}
        '6': {name: meta.tag.inline.redirect.mediawiki}
      patterns:
      - include: '#style_in_link'
    - name: meta.tag.link.wiki.mediawiki
      begin: |-
        (?x:
        (\[\[)                      (?# opening brackets)
        (:)?                        (?# colon to suppress image or category?)
        ((\s+):[^\[\]]*(?=\]\]))?   (?# a colon after spaces is invalid)
        [ ]*                        (?# spaces)
        ( (([^\[\]|]+)(:))?         (?# namespace)
        ([^\[\]|]+)(?<!\s)[ ]*      (?# link name)
        )?
        )
      beginCaptures:
        '1': {name: meta.tag.inline.any.mediawiki}
        '2': {name: keyword.operator.wiki-link.suppress-image-or-category.mediawiki}
        '4': {name: invalid.illegal.whitespace.mediawiki}
        '7': {name: markup.underline.link.internal.namespace.mediawiki}
        '8': {name: punctuation.fix_this_later.colon.mediawiki}
        '9': {name: markup.underline.link.internal.mediawiki}
      end: |-
        (?x:
        (\|[ ]*([^\[\]\|]+)[ ]*)?     (?# pipe, spaces, anything, spaces)
        (\]\])                        (?# closing brackets)
        )
      endCaptures:
        '2': {name: string.other.title.link.wiki-link.mediawiki}
        '3': {name: meta.tag.inline.any.mediawiki}
      patterns:
      - include: '#style_in_link'

    - name: meta.link.inline.external.mediawiki
      comment: external link like [http://example.com/example.html Example]
      contentName: string.other.title.link.external.mediawiki
      begin: (\[)((\w[\w\d+-\.]+://|mailto:)[-:@\w.~%+/?=&#]+(?<![.?:]))\s*(?=[^\]]*\])
      end: (\])
      beginCaptures:
        '1': {name: meta.tag.inline.any.mediawiki}
        '2': {name: markup.underline.link.external.mediawiki}
      endCaptures:
        '1': {name: meta.tag.inline.any.mediawiki}
      patterns:
      - include: '#style_in_link'
    - name: markup.underline.link.external.mediawiki
      comment: 'external link like just http://example.com/example.html.
                Proto valid chars: The scheme should start with a letter (upper or lower case),
                and can contains letters (still upper and lower case), number, "+", "-" and "."
                * http://www.ietf.org/rfc/rfc2396.txt
                * http://stackoverflow.com/questions/3641722/valid-characters-for-uri-schemes'
      match: (\w[\w\d+-\.]+://|mailto:)[-:@\w.~%+/?=&#]+(?<![.?:])

  source-stuff:
    patterns:
    - begin: (?<=<source lang="python">)
      end: (?=</source>)
      patterns:
      - include: source.python
    - comment: INI plugin required
      begin: (?<=<source lang="ini">)
      end: (?=</source>)
      patterns:
      - include: source.ini
    - begin: (?<=<source lang="javascript">)
      end: (?=</source>)
      patterns:
      - include: source.js
    - begin: (?<=<source lang="c">)
      end: (?=</source>)
      patterns:
      - include: source.c
    - begin: (?<=<source lang="actionscript">)
      end: (?=</source>)
      patterns:
      - include: source.actionscript
    - begin: (?<=<source lang="applescript">)
      end: (?=</source>)
      patterns:
      - include: source.applescript
    - begin: (?<=<source lang="asp">)
      end: (?=</source>)
      patterns:
      - include: source.asp
    - begin: (?<=<source lang="dos">)
      end: (?=</source>)
      patterns:
      - include: source.dosbatch
    - begin: (?<=<source lang="csharp">)
      end: (?=</source>)
      patterns:
      - include: source.cs
    - begin: (?<=<source lang="cpp">)
      end: (?=</source>)
      patterns:
      - include: source.c++
    - begin: (?<=<source lang="clojure">)
      end: (?=</source>)
      patterns:
      - include: source.clojure
    - begin: (?<=<source lang="css">)
      end: (?=</source>)
      patterns:
      - include: source.css
    - begin: (?<=<source lang="d">)
      end: (?=</source>)
      patterns:
      - include: source.d
    - begin: (?<=<source lang="erlang">)
      end: (?=</source>)
      patterns:
      - include: source.erlang
    - begin: (?<=<source lang="go">)
      end: (?=</source>)
      patterns:
      - include: source.go
    - begin: (?<=<source lang="haskell">)
      end: (?=</source>)
      patterns:
      - include: source.haskell
    - begin: (?<=<source lang="java">)
      end: (?=</source>)
      patterns:
      - include: source.java
    - begin: (?<=<source lang="groovy">)
      end: (?=</source>)
      patterns:
      - include: source.groovy
    - begin: (?<=<source lang="latex">)
      end: (?=</source>)
      patterns:
      - include: source.latex
    - begin: (?<=<source lang="lisp">)
      end: (?=</source>)
      patterns:
      - include: source.lisp
    - begin: (?<=<source lang="lua">)
      end: (?=</source>)
      patterns:
      - include: source.lua
    - begin: (?<=<source lang="make">)
      end: (?=</source>)
      patterns:
      - include: source.makefile
    - begin: (?<=<source lang="matlab">)
      end: (?=</source>)
      patterns:
      - include: source.matlab
    - begin: (?<=<source lang="objc">)
      end: (?=</source>)
      patterns:
      - include: source.objc
    - begin: (?<=<source lang="ocaml">)
      end: (?=</source>)
      patterns:
      - include: source.ocaml
    - begin: (?<=<source lang="pascal">)
      end: (?=</source>)
      patterns:
      - include: source.pascal
    - begin: (?<=<source lang="perl">)
      end: (?=</source>)
      patterns:
      - include: source.perl
    - begin: (?<=<source lang="php">)
      end: (?=</source>)
      patterns:
      - include: source.php
    - begin: (?<=<source lang="r">)
      end: (?=</source>)
      patterns:
      - include: source.r
    - begin: (?<=<source lang="rails">)
      end: (?=</source>)
      patterns:
      - include: source.ruby.rails
    - begin: (?<=<source lang="ruby">)
      end: (?=</source>)
      patterns:
      - include: source.ruby
    - begin: (?<=<source lang="scala">)
      end: (?=</source>)
      patterns:
      - include: source.scala
    - begin: (?<=<source lang="bash">)
      end: (?=</source>)
      patterns:
      - include: source.shell
    - begin: (?<=<source lang="sql">)
      end: (?=</source>)
      patterns:
      - include: source.sql
    - begin: (?<=<source lang="tsql">)
      end: (?=</source>)
      patterns:
      - include: source.tsql
    - begin: (?<=<source lang="tcl">)
      end: (?=</source>)
      patterns:
      - include: source.tcl
    - begin: (?<=<source lang="xml">)
      end: (?=</source>)
      patterns:
      - include: text.xml
    - begin: (?<=<source lang="yaml">)
      end: (?=</source>)
      patterns:
      - include: source.yaml
    - begin: (?<=<source lang="html5">)
      end: (?=</source>)
      patterns:
      - include: text.html.basic
    - comment: unknown source

  style:
    comment: "TODO: Still need to add:
              * font
              * ruby, rb, rp, rt
              * cite inline tags to this section, and make sure that the other tags can accept attributes in the tag opening, etc.
                The current implementation is intended to be naive, but covering the majority of uses in mediawiki code.
              We also need to add mediawiki-specific tags:
              * nowiki, noinclude, includeonly"
    patterns:
    - contentName: markup.bold.html.mediawiki
      begin: "(''')"
      end: "(''')"
      beginCaptures:
        '1': {name: markup.other.special.mediawiki}
      endCaptures:
        '1': {name: markup.other.special.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.italic.html.mediawiki
      begin: "('')"
      end: "(''(?!'[^']))"
      beginCaptures:
        '1': {name: markup.other.special.mediawiki}
      endCaptures:
        '1': {name: markup.other.special.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.bold.html.mediawiki
      begin: (?i:(<(b|strong)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.italic.html.mediawiki
      begin: (?i:(<(i|em)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.1.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.2.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.other.strikethrough.html.mediawiki
      begin: (?i:(<(s|strike)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.underline.html.mediawiki
      begin: (?i:(<(u)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.raw.html.mediawiki
      begin: (?i:(<(tt|code|kbd)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.other.inline-styles.html.mediawiki
      begin: (?i:(<(big|small|sub|sup)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
    - contentName: markup.other.inline-styles.html.mediawiki
      begin: (?i:(<(span|font|div)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
      - include: '#block'
      - include: '#block_pre_spaced'
    - contentName: meta.tag.source.validhtml.mediawiki
      begin: (?i:(<(pre)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      # no markup in pre
      # patterns:
      # - include: '#inline'
    - contentName: meta.tag.source.validhtml.mediawiki
      begin: (?i:(<(nowiki|noinclude|includeonly)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
    - name: meta.tag.validhtml.mediawiki
      match: (?i:(<(br)(\b[^>]*)\/?>))
      captures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
    ########################## TODO ############################
    # - contentName: meta.tag.source.unknown.validhtml.mediawiki
    #   begin: (?i:(<([\w]+?)(\b[^>]*)>))
    #   end: (</(\2)>)
    #   beginCaptures:
    #     '1': {name: meta.tag.validhtml.mediawiki}
    #     '2': {name: entity.name.tag.unknown.validhtml.mediawiki}
    #     '3': {name: entity.other.attributes.validhtml.mediawiki}
    #   endCaptures:
    #     '1': {name: meta.tag.validhtml.mediawiki}
    #     '2': {name: entity.name.tag.unknown.validhtml.mediawiki}
    #   patterns:
    #   - include: '#inline'
    #   - include: '#block'
    #   # no markup in nowiki..
    #   # patterns:
    #   # - include: '#inline'

  style_in_link:
    patterns:
    - contentName: markup.bold.mediawiki
      begin: "(''')"
      beginCaptures:
        '1': {name: markup.other.special.mediawiki}
      endCaptures:
        '1': {name: markup.other.special.mediawiki}
      end: "(''')"
      patterns:
      - include: '#style_in_link'
    - contentName: markup.italic.mediawiki
      begin: "('')"
      end: "('')"
      beginCaptures:
        '1': {name: markup.other.special.mediawiki}
      endCaptures:
        '1': {name: markup.other.special.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.bold.html.mediawiki
      begin: (?i:(<(b|strong)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.italic.html.mediawiki
      begin: (?i:(<(i|em)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.other.strikethrough.html.mediawiki
      begin: (?i:(<(s|strike)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.underline.html.mediawiki
      begin: (?i:(<(u)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.raw.html.mediawiki
      begin: (?i:(<(tt|code|keyboard)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.other.inline-styles.html.mediawiki
      begin: (?i:(<(big|small|sub|sup)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#style_in_link'
    - contentName: markup.other.inline-styles.html.mediawiki
      begin: (?i:(<(span|font|div)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      patterns:
      - include: '#inline'
      - include: '#block'
      - include: '#block_pre_spaced'
    - contentName: meta.tag.source.validhtml.mediawiki
      begin: (?i:(<(pre)(\b[^>]*)>))
      end: (</(\2)>)
      beginCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
        '3': {name: entity.other.attributes.validhtml.mediawiki}
      endCaptures:
        '1': {name: meta.tag.validhtml.mediawiki}
        '2': {name: entity.name.tag.validhtml.mediawiki}
      # no markup in pre
      # patterns:
      # - include: '#inline'
    - include: '#comments'

  table:
    patterns:
    - contentName: meta.table.mediawiki
      begin: (\{\|)
      end: (\|\})
      beginCaptures:
        '1': {name: markup.other.special.start-delimiter.table.mediawiki}
      endCaptures:
        '1': {name: markup.other.special.stop-delimiter.table.mediawiki}
      patterns:
      - name: meta.table.attributes.mediawiki
        match: (\S+)(=["']?)((?:.?(?!["']?\s+(?:\S+)=|[>"']))*.?)(["']?)
        captures:
          '1': {name: entity.other.attributes.validhtml.mediawiki}
          '2': {name: entity.other.attributes.table.cellcontents.validhtml.mediawiki}
          '3': {name: entity.other.attributes.validhtml.mediawiki}
          '4': {name: entity.other.attributes.table.cellcontents.validhtml.mediawiki}
      - name: meta.table.caption.mediawiki
        match: ^(\|\+)[\t ]*(.*)$
        captures:
          '1': {name: markup.other.special.table.caption.mediawiki}
          '2': {name: variable.parameter.name.string.mediawiki}
      - name: markup.other.special.row-delimiter.table.mediawiki
        match: \|\-
      - name: text.cellcontents.table.mediawiki
        # begin: ^\s*([\|!]|(?<=\|)\||(?<=!)!)
        # end: (\||!(?=\||!)|^(\s*)(?=\|\-)|^(\s*)(?=\|\})|(^\s*\|(?!\-|\})))  # || or !! or |- or |}
        begin: (^\s*\|(?!\-|\})|^\s*!|\|\||!!)  # starts from ^| or ^! or || or !!
        end: (?=^\s*\||^\s*!|\|\||!!|\|\-|\|\})
        beginCaptures:
          '1': {name: markup.other.special.cell-delimiter.table.mediawiki}
        # endCaptures:
        #   '1': {name: markup.other.special.cell-delimiter.table.mediawiki}
        patterns:
        - include: '#inline'
        - contentName: entity.other.attributes.table.cellcontents.cell-html-value.validhtml.mediawiki
          begin: (\S+)(=["']?)
          end: (["'])|(?=\s+\S+=|\s*\|)(?!\|)
          beginCaptures:
            '1': {name: entity.other.attributes.table.cellcontents.cell-html.validhtml.mediawiki}
            '2': {name: entity.other.attributes.table.cellcontents.cell-html.validhtml.mediawiki}
          endCaptures:
            '1': {name: entity.other.attributes.table.cellcontents.cell-html.validhtml.mediawiki}
          patterns:
          - include: '#inline'
        - name: entity.other.attributes.table.cellcontents.cell-html-delimiter.validhtml.mediawiki
          match: \|

  template_parameters:
    comment: Template parameters in template declaration (on template page)
    patterns:
    - name: meta.template-parameter.mediawiki
      comment: numeric parameter in template body (not in transclusion!)
      match: '{{{[ ]*([0-9]+)[ ]*}}}'
      captures:
        '1': {name: variable.parameter.template.numeric.mediawiki}
    - name: meta.template-parameter.mediawiki
      comment: named parameter in template body (not in transclusion!)
      match: '{{{[ ]*(.*?)[ ]*}}}'
      captures:
        '1': {name: variable.parameter.template.named.mediawiki}

  template:
    comment: "This repository item covers templates and parser functions."
    patterns:
    #- comment: "Why oh why did mediawiki have to add these??"
    #  name: meta.template.parser-function.mediawiki
    #  begin: ({{)(?=[ ]*#)
    #  beginCaptures:
    #    '1': {name: meta.tag.inline.template.mediawiki}
    #    '2': {name: meta.function-call.template.mediawiki}
    #  end: (}})
    #  endCaptures:
    #    '1': {name: meta.tag.inline.template.mediawiki}
    #  patterns:
    #  - include: '#inline'
    - comment: scope as meta.function-call as the closest thing to a template with parameters, etc.
      contentName: meta.template.mediawiki
      begin: (?<![^\{]\{)(\{{2})(?!\{[^\{])
      end: (?<![^\}]\})(\}{2})(?!\}([^\}]|$))
      beginCaptures:
        '1': {name: meta.tag.inline.start.template.mediawiki}
      endCaptures:
        '1': {name: meta.tag.inline.stop.template.mediawiki}
      patterns:
      # hack: prevent first param line if starts with space to match as markup.raw.block.mediawiki (block_pre_spaced)
      - name: markup.non-raw.template.mediawiki
        match: ^\s*(?=\|)
      - include: '#comments'
      - include: "$self"
      - include: "#template_parameters"
      - name: entity.name.function.template.mediawiki
        match: (?<=\{{2})\s*([^\{\}\|]+)
      - name: meta.tag.param-delimiter.template.mediawiki
        match: (\|)
      - contentName: meta.function.parameters.template.mediawiki
        begin: (?<=\|)\s*(([^\{\}\|=]+)(=))?
        beginCaptures:
          '2': {name: variable.parameter.template.mediawiki}
          '3': {name: punctuation.equals-sign.template.mediawiki}
        end: (?=\||\}{2})
        patterns:
        - include: '#inline'
        - include: '#block'
        - include: '#block_pre_spaced_in_templates'
keyEquivalent: ^~M
